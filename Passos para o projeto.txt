ðŸ“Œ Planeamento e ConfiguraÃ§Ã£o Inicial
âœ… 1. Configurar o ambiente de desenvolvimento
	â€¢ Instalar PHP, MySQL, Composer, Node.js e React.
	â€¢ Configurar um servidor local (XAMPP).

âœ… 2. Criar a estrutura da base de dados

CREATE TABLE users (
    id INT AUTO_INCREMENT PRIMARY KEY,
    name VARCHAR(100) NOT NULL,
    email VARCHAR(255) UNIQUE NOT NULL,
    password VARCHAR(255) NOT NULL,
    profile_picture VARCHAR(255), 
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- Tabela de localizaÃ§Ãµes
CREATE TABLE locations (
    id INT AUTO_INCREMENT PRIMARY KEY,
    name VARCHAR(255) NOT NULL,
    address VARCHAR(255),
    latitude DECIMAL(9,6),
    longitude DECIMAL(9,6),
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- Tabela de eventos
CREATE TABLE events (
    id INT AUTO_INCREMENT PRIMARY KEY,
    name VARCHAR(255) NOT NULL,
    description TEXT,
    date_event DATETIME NOT NULL,
    location_id INT NOT NULL,
    created_by INT NOT NULL, 
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (location_id) REFERENCES locations(id) ON DELETE CASCADE,
    FOREIGN KEY (created_by) REFERENCES users(id) ON DELETE CASCADE
);

-- Tabela de participaÃ§Ãµes (garante que cada user tem um local e data definidos)
CREATE TABLE event_participants (
    id INT AUTO_INCREMENT PRIMARY KEY,
    user_id INT NOT NULL,
    event_id INT NOT NULL,
    location_id INT NOT NULL, 
    participation_date DATETIME NOT NULL, 
    role ENUM('participante', 'organizador') DEFAULT 'participante',
    FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE,
    FOREIGN KEY (event_id) REFERENCES events(id) ON DELETE CASCADE,
    FOREIGN KEY (location_id) REFERENCES locations(id) ON DELETE CASCADE,
    UNIQUE (user_id, participation_date) 
);

	â€¢ Opcional: messages (chat entre users).
	â€¢ Opcional: Criar tabelas para notificaÃ§Ãµes e amizades.

âœ… 3. Implementar a autenticaÃ§Ã£o e seguranÃ§a (PHP + JWT)
	â€¢ Criar sistema de registo e login com JWT para autenticaÃ§Ã£o segura.
	â€¢ Criar sistema de proteÃ§Ã£o de rotas para garantir seguranÃ§a.

ðŸ“Œ Backend - PHP (API RESTful)
âœ… 4. Criar endpoints para utilizadores (login, registo, perfil)
âœ… 5. Criar endpoints para eventos (criar, listar, gerir inscriÃ§Ãµes)
âœ… 6. Criar endpoints para grupos (criar, listar, gerir membros)
âœ… 7. Criar endpoints para mensagens (armazenar e recuperar conversas)
âœ… 8. Implementar WebSockets para chat em tempo real (Node.js + Socket.io)

ðŸ“Œ Testes de API
âœ… 9. Testar os endpoints com Postman para garantir que tudo funciona corretamente

ðŸ“Œ Frontend - React
âœ… 10. Criar a interface de utilizador (login, registo, dashboard)
âœ… 11. Implementar o sistema de eventos (criaÃ§Ã£o, inscriÃ§Ã£o, detalhes)
âœ… 12. Implementar o sistema de grupos (criaÃ§Ã£o, adesÃ£o, listagem)
âœ… 13. Criar e integrar o chat (interface + WebSocket)

ðŸ“Œ Testes e ImplementaÃ§Ã£o
âœ… 14. Testar a aplicaÃ§Ã£o completa (fluxo de utilizador e funcionalidades)
â€¢	Configurar um servidor online para hospedar PHP + MySQL.